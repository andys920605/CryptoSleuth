// Code generated by MockGen. DO NOT EDIT.
// Source: sleuth/domain/interface (interfaces: IWalletTrackingSvc)
//
// Generated by this command:
//
//	mockgen -destination=test/mock/iwallet_tracking_mock_svc.go -package=mock sleuth/domain/interface IWalletTrackingSvc
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	router "sleuth/model/router"
	errs "sleuth/utils/errs"

	gomock "go.uber.org/mock/gomock"
)

// MockIWalletTrackingSvc is a mock of IWalletTrackingSvc interface.
type MockIWalletTrackingSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletTrackingSvcMockRecorder
}

// MockIWalletTrackingSvcMockRecorder is the mock recorder for MockIWalletTrackingSvc.
type MockIWalletTrackingSvcMockRecorder struct {
	mock *MockIWalletTrackingSvc
}

// NewMockIWalletTrackingSvc creates a new mock instance.
func NewMockIWalletTrackingSvc(ctrl *gomock.Controller) *MockIWalletTrackingSvc {
	mock := &MockIWalletTrackingSvc{ctrl: ctrl}
	mock.recorder = &MockIWalletTrackingSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletTrackingSvc) EXPECT() *MockIWalletTrackingSvcMockRecorder {
	return m.recorder
}

// GetTransactionHistory mocks base method.
func (m *MockIWalletTrackingSvc) GetTransactionHistory(arg0 router.TransationHistoryReq) (*router.Response, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", arg0)
	ret0, _ := ret[0].(*router.Response)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockIWalletTrackingSvcMockRecorder) GetTransactionHistory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockIWalletTrackingSvc)(nil).GetTransactionHistory), arg0)
}

// GetTransactionHistoryByTxhash mocks base method.
func (m *MockIWalletTrackingSvc) GetTransactionHistoryByTxhash(arg0 string) (*router.Response, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistoryByTxhash", arg0)
	ret0, _ := ret[0].(*router.Response)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// GetTransactionHistoryByTxhash indicates an expected call of GetTransactionHistoryByTxhash.
func (mr *MockIWalletTrackingSvcMockRecorder) GetTransactionHistoryByTxhash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistoryByTxhash", reflect.TypeOf((*MockIWalletTrackingSvc)(nil).GetTransactionHistoryByTxhash), arg0)
}

// GetWalletBalance mocks base method.
func (m *MockIWalletTrackingSvc) GetWalletBalance(arg0 string) (*router.Response, *errs.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", arg0)
	ret0, _ := ret[0].(*router.Response)
	ret1, _ := ret[1].(*errs.ErrorResponse)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockIWalletTrackingSvcMockRecorder) GetWalletBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockIWalletTrackingSvc)(nil).GetWalletBalance), arg0)
}
